{"version":3,"sources":["components/ExChart.js","App.js","serviceWorker.js","index.js"],"names":["ExChart","min","data","name","uv","Math","floor","random","xx","pv","react_default","a","createElement","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","React","Component","RangePicker","DatePicker","MonthPicker","App","WeekPicker","onChange","date","dateString","console","log","row","type","col","span","components_ExChart","this","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.390f56e3.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from \"recharts\";\n\nclass ExChart extends React.Component {\n  render() {\n    const min = 1111;\n    const max = 3333;\n\n    const data = [\n      {\n        name: \"Page A\",\n        uv: Math.floor(Math.random() * (max - min + 1) + min),\n        xx: Math.floor(Math.random() * (max - min + 1) + min),\n        pv: Math.floor(Math.random() * (max - min + 1) + min)\n      },\n      {\n        name: \"Page B\",\n        uv: Math.floor(Math.random() * (max - min + 1) + min),\n        xx: Math.floor(Math.random() * (max - min + 1) + min),\n        pv: Math.floor(Math.random() * (max - min + 1) + min)\n      },\n      {\n        name: \"Page C\",\n        uv: Math.floor(Math.random() * (max - min + 1) + min),\n        xx: Math.floor(Math.random() * (max - min + 1) + min),\n        pv: Math.floor(Math.random() * (max - min + 1) + min)\n      },\n      {\n        name: \"Page D\",\n        uv: Math.floor(Math.random() * (max - min + 1) + min),\n        xx: Math.floor(Math.random() * (max - min + 1) + min),\n        pv: Math.floor(Math.random() * (max - min + 1) + min)\n      },\n      {\n        name: \"Page E\",\n        uv: Math.floor(Math.random() * (max - min + 1) + min),\n        xx: Math.floor(Math.random() * (max - min + 1) + min),\n        pv: Math.floor(Math.random() * (max - min + 1) + min)\n      },\n      {\n        name: \"Page F\",\n        uv: Math.floor(Math.random() * (max - min + 1) + min),\n        xx: Math.floor(Math.random() * (max - min + 1) + min),\n        pv: Math.floor(Math.random() * (max - min + 1) + min)\n      },\n      {\n        name: \"Page G\",\n        uv: Math.floor(Math.random() * (max - min + 1) + min),\n        xx: Math.floor(Math.random() * (max - min + 1) + min),\n        pv: Math.floor(Math.random() * (max - min + 1) + min)\n      }\n    ];\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart\n          width={600}\n          height={300}\n          data={data}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"pv\" fill=\"#8884d8\" />\n          <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\n          <Bar dataKey=\"xx\" fill=\"#de3e32\" />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n\nexport default ExChart;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ExChart from \"./components/ExChart\";\nimport { Row, Col } from \"antd\";\nimport { DatePicker } from 'antd';\nconst { MonthPicker, RangePicker, WeekPicker } = DatePicker;\n\nclass App extends Component {\n  onChange = (date, dateString) => {\n    console.log(date, dateString);\n  }\n\n  render() {\n    return (\n      <div>\n        <Row  type=\"flex\" >\n          <Col span={12}>\n            <ExChart />\n          </Col>\n          <Col span={12}>\n            <RangePicker onChange={this.onChange} />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}